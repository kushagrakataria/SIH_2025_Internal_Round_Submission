rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading user profiles for emergency contacts (but not full profile data)
      allow read: if request.auth != null && 
        resource.data.keys().hasOnly(['name', 'digitalId', 'email']);
    }
    
    // Trips - users can manage their own trips
    match /trips/{tripId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Emergency incidents - write access for authenticated users
    match /emergencyIncidents/{incidentId} {
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         request.auth.uid in resource.data.notifiedContacts);
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Safety alerts - read access for authenticated users
    match /alerts/{alertId} {
      allow read: if request.auth != null;
      allow write: if false; // Only system/admin can write alerts
    }
    
    // Check-ins - users can manage their own check-ins
    match /checkIns/{checkInId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Public read access for safety zones (if implemented)
    match /geoZones/{zoneId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins via Cloud Functions
    }
  }
}